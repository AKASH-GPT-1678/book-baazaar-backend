// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  address   String?   @default("India")
  contact   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings  BookListing[] @relation("UserListings")
  orders    Order[]       @relation("UserOrders")
  favorites Favorites[]   @relation("Favorites")
}

model BookListing {
  id          String    @id @default(cuid())
  title       String
  author      String
  description String?
  price       Float
  condition   Condition
  isBundle    Boolean   @default(false)
  category    String
  feature     String?
  imageUrl    String?   @default("https://placehold.co/400")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  views       Int       @default(0)

  sellerId String
  seller   Users  @relation("UserListings", fields: [sellerId], references: [id])

  orders    Order[]
  Favorites Favorites[]
}

model Favorites {
  id     String @id @default(uuid())
  bookId String

  BookListing   BookListing? @relation(fields: [bookListingId], references: [id])
  bookListingId String?

  Users   Users  @relation("Favorites", fields: [usersId], references: [id])
  usersId String
}

model Order {
  id        String      @id @default(cuid())
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())

  buyerId String
  buyer   Users  @relation("UserOrders", fields: [buyerId], references: [id])

  listingId String
  listing   BookListing @relation(fields: [listingId], references: [id])
}

enum Condition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
